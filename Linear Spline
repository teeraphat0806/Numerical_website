
import React, { useState } from 'react';

const LinearSpline = () => {
  const [points, setPoints] = useState([{ x: 0, y: 0 }, { x: 1, y: 1 }]);
  const [xValue, setXValue] = useState(0);
  const [yValue, setYValue] = useState(null);

  const handlePointChange = (e, index, type) => {
    const newPoints = [...points];
    if (isNaN(e.target.value)) {
      return;
    }
    newPoints[index][type] = parseFloat(e.target.value);
    setPoints(newPoints);
  };

  const addPoint = () => {
    setPoints([...points, { x: 0, y: 0 }]);
  };

  const spline = (x) => {
    for (let i = 0; i < points.length - 1; i++) {
      if (x >= points[i].x && x <= points[i + 1].x) {
        return (
          points[i].y +
          ((x - points[i].x) * (points[i + 1].y - points[i].y)) /
            (points[i + 1].x - points[i].x)
        );
      }
    }
    return null;
  };

  const calculateY = () => {
    const y = spline(xValue);
    setYValue(y);
  };

  return (
    <div>
      <h1>Linear Spline Calculator</h1>
      <div>
        {points.map((point, index) => (
          <div key={index} className="row">
            <input
              min="1"
              type="number"
              value={point.x}
              onChange={(e) => handlePointChange(e, index, 'x')}
              placeholder={`x${index}`}
            />
            <input
              min="1"
              type="number"
              value={point.y}
              onChange={(e) => handlePointChange(e, index, 'y')}
              placeholder={`y${index}`}
            />
          </div>
        ))}
        <button onClick={addPoint}>Add Point</button>
      </div>
      <div>
        <label>
          x:
          <input
            min="1"
            type="number"
            value={xValue}
            onChange={(e) => setXValue(parseFloat(e.target.value))}
          />
        </label>
      </div>
      <button onClick={calculateY}>Calculate y</button>
      {yValue !== null && <p>Result: y = {yValue}</p>}
    </div>
  );
};

export default LinearSpline;
